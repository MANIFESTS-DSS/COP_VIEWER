{"version":3,"file":"L.AutoGraticule.js","sources":["../src/L.AutoGraticule.ts"],"sourcesContent":["import L, { LatLngBounds, LatLngExpression, LayerOptions, LeafletEventHandlerFnMap, PolylineOptions, Map } from 'leaflet';\nimport './L.AutoGraticule.css';\n\nexport interface AutoGraticuleOptions extends LayerOptions {\n    redraw: keyof LeafletEventHandlerFnMap,\n\n    /** Minimum distance between two lines in pixels */\n    minDistance: number\n}\n\nexport default class AutoGraticule extends L.LayerGroup {\n\n    options: AutoGraticuleOptions = {\n        redraw: 'moveend',\n        minDistance: 100 // Minimum distance between two lines in pixels\n    };\n\n    lineStyle: PolylineOptions = {\n        stroke: true,\n        color: '#111',\n        opacity: 0.6,\n        weight: 1,\n        interactive: false\n    };\n\n    _bounds!: LatLngBounds;\n\n\n    constructor(options?: Partial<AutoGraticuleOptions>) {\n        super();\n        L.Util.setOptions(this, options);\n    }\n\n\n    onAdd(map: Map) {\n        this._map = map;\n\n        this.redraw();\n        this._map.on('viewreset ' + this.options.redraw, this.redraw, this);\n\n        this.eachLayer(map.addLayer, map);\n\n        return this;\n    }\n\n    onRemove(map: Map) {\n        map.off('viewreset '+ this.options.redraw, this.redraw, this);\n        this.eachLayer(this.removeLayer, this);\n        return this;\n    }\n\n    redraw() {\n        this._bounds = this._map.getBounds().pad(0.5);\n\n        this.clearLayers();\n\n        this.constructLines();\n\n        return this;\n    }\n\n    constructLines() {\n        const bounds = this._map.getBounds();\n        const zoom = this._map.getZoom();\n\n        // Fix drawing of lines outside of bounds\n        this._bounds = AutoGraticule.bboxIntersect(bounds, [[-85, -180], [85, 180]]);\n\n        // Fix drawing of labels outside of bounds\n        const getBoundsBkp = this._map.getBounds;\n        try {\n            this._map.getBounds = function() {\n                return AutoGraticule.bboxIntersect(getBoundsBkp.apply(this), [[-85, -180], [85, 180]])\n            };\n\n            // Longitude\n            const center = this._map.project(bounds.getCenter(), zoom);\n            const dist = AutoGraticule.niceRound(AutoGraticule.round(this._map.unproject(center.add([ this.options.minDistance / 2, 0 ]), zoom).lng - this._map.unproject(center.subtract([ this.options.minDistance / 2, 0 ]), zoom).lng, 12), false);\n            const west = Math.max(bounds.getWest(), -180);\n            const east = Math.min(bounds.getEast(), 180);\n            for (let lng = Math.ceil(AutoGraticule.round(west/dist, 12))*dist; lng <= east; lng+=dist) {\n                this.addLayer(this.buildXLine(lng));\n                this.addLayer(this.buildLabel('gridlabel-horiz', AutoGraticule.round(lng, 12)));\n            }\n\n            // Latitude\n            if(bounds.getNorth() > 0) {\n                let lat = Math.max(0, bounds.getSouth());\n                let first = true;\n                while(lat < bounds.getNorth() && lat < 85) {\n                    const point = this._map.project([ lat, bounds.getCenter().lng ], zoom);\n                    const point2LatLng = this._map.unproject(point.subtract([ 0, this.options.minDistance ]), zoom);\n\n                    const dist = AutoGraticule.niceRound(AutoGraticule.round(point2LatLng.lat - lat, 12), true);\n                    lat = AutoGraticule.round(first ? Math.ceil(AutoGraticule.round(lat/dist, 12))*dist : Math.ceil(AutoGraticule.round(point2LatLng.lat/dist, 12))*dist, 2);\n\n                    first = false;\n\n                    this.addLayer(this.buildYLine(lat));\n                    this.addLayer(this.buildLabel('gridlabel-vert', lat));\n                }\n            }\n            if(bounds.getSouth() < 0) {\n                let lat = Math.min(0, bounds.getNorth());\n                let first = true;\n                while(lat > bounds.getSouth() && lat > -85) {\n                    const point = this._map.project([ lat, bounds.getCenter().lng ], zoom);\n                    const point2LatLng = this._map.unproject(point.add([ 0, this.options.minDistance ]), zoom);\n\n                    const dist = AutoGraticule.niceRound(AutoGraticule.round(lat - point2LatLng.lat, 12), true);\n                    lat = AutoGraticule.round(first ? Math.floor(AutoGraticule.round(lat/dist, 12))*dist : Math.floor(AutoGraticule.round(point2LatLng.lat/dist, 12))*dist, 2);\n\n                    first = false;\n\n                    this.addLayer(this.buildYLine(lat));\n                    this.addLayer(this.buildLabel('gridlabel-vert', lat));\n                }\n            }\n        } finally {\n            this._map.getBounds = getBoundsBkp;\n        }\n    }\n\n    buildXLine(x: number): L.Polyline {\n        const bottomLL = new L.LatLng(this._bounds.getSouth(), x);\n        const topLL = new L.LatLng(this._bounds.getNorth(), x);\n\n        return new L.Polyline([bottomLL, topLL], this.lineStyle);\n    }\n\n    buildYLine(y: number): L.Polyline {\n        const leftLL = new L.LatLng(y, this._bounds.getWest());\n        const rightLL = new L.LatLng(y, this._bounds.getEast());\n\n        return new L.Polyline([leftLL, rightLL], this.lineStyle);\n    }\n\n    buildLabel(axis: 'gridlabel-horiz' | 'gridlabel-vert', val: number) {\n        const bounds = this._map.getBounds().pad(-0.003);\n        let latLng: L.LatLng;\n        if (axis == 'gridlabel-horiz') {\n            latLng = new L.LatLng(bounds.getNorth(), val);\n        } else {\n            latLng = new L.LatLng(val, bounds.getWest());\n        }\n\n        return L.marker(latLng, {\n            interactive: false,\n            icon: L.divIcon({\n                iconSize: [0, 0],\n                className: 'leaflet-grid-label',\n                html: '<div class=\"' + axis + '\">' + val + '&#8239;Â°</div>'\n            })\n        });\n    }\n\n    static round(number: number, digits: number) {\n        const fac = Math.pow(10, digits);\n        return Math.round(number*fac)/fac;\n    }\n    \n    static niceRound(number: number, variableDistance: boolean) {\n        if(number <= 0 || !isFinite(number))\n            throw \"Invalid number \" + number;\n        else {\n            if(variableDistance && number >= 5)\n                return 5;\n            if(number <= 10) {\n                let fac = 1;\n                while(number>1) { fac*=10; number/=10; }\n                while(number<=0.1) { fac/=10; number*=10; }\n    \n                // Dist is now some number between 0.1 and 1, so we can round it conveniently and then multiply it again by fac to get back to the original dist\n    \n                if(number == 0.1)\n                    return AutoGraticule.round(0.1*fac, 12);\n                else if(number <= 0.2)\n                    return AutoGraticule.round(0.2*fac, 12);\n                else if(number <= 0.5)\n                    return AutoGraticule.round(0.5*fac, 12);\n                else\n                    return fac;\n            } else if(number <= 30)\n                return 30;\n            else if(number <= 45)\n                return 45;\n            else if(number <= 60)\n                return 60;\n            else\n                return 90;\n        }\n    }\n    \n    static bboxIntersect(bbox1: LatLngBounds | LatLngExpression[], bbox2: LatLngBounds | LatLngExpression[]) {\n        const bounds1 = bbox1 instanceof LatLngBounds ? bbox1 : L.latLngBounds(bbox1);\n        const bounds2 = bbox2 instanceof LatLngBounds ? bbox2 : L.latLngBounds(bbox2);\n        return L.latLngBounds([\n            [ Math.max(bounds1.getSouth(), bounds2.getSouth()), Math.max(bounds1.getWest(), bounds2.getWest())],\n            [ Math.min(bounds1.getNorth(), bounds2.getNorth()), Math.min(bounds1.getEast(), bounds2.getEast())]\n        ]);\n    }\n}\n"],"names":["L","LatLngBounds"],"mappings":";;;;;;;;;AAUqB,QAAA,sBAAsBA,sBAAE,WAAW;AAAA,IAkBpD,YAAY,SAAyC;AAC3C;AAjBsB,WAAA,UAAA;AAAA,QAC5B,QAAQ;AAAA,QACR,aAAa;AAAA,MAAA;AAGY,WAAA,YAAA;AAAA,QACzB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,SAAS;AAAA,QACT,QAAQ;AAAA,QACR,aAAa;AAAA,MAAA;AAQXA,iBAAAA,WAAA,KAAK,WAAW,MAAM,OAAO;AAAA,IACnC;AAAA,IAGA,MAAM,KAAU;AACZ,WAAK,OAAO;AAEZ,WAAK,OAAO;AACP,WAAA,KAAK,GAAG,eAAe,KAAK,QAAQ,QAAQ,KAAK,QAAQ,IAAI;AAE7D,WAAA,UAAU,IAAI,UAAU,GAAG;AAEzB,aAAA;AAAA,IACX;AAAA,IAEA,SAAS,KAAU;AACf,UAAI,IAAI,eAAc,KAAK,QAAQ,QAAQ,KAAK,QAAQ,IAAI;AACvD,WAAA,UAAU,KAAK,aAAa,IAAI;AAC9B,aAAA;AAAA,IACX;AAAA,IAEA,SAAS;AACL,WAAK,UAAU,KAAK,KAAK,YAAY,IAAI,GAAG;AAE5C,WAAK,YAAY;AAEjB,WAAK,eAAe;AAEb,aAAA;AAAA,IACX;AAAA,IAEA,iBAAiB;AACP,YAAA,SAAS,KAAK,KAAK,UAAU;AAC7B,YAAA,OAAO,KAAK,KAAK,QAAQ;AAG/B,WAAK,UAAU,cAAc,cAAc,QAAQ,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;AAGrE,YAAA,eAAe,KAAK,KAAK;AAC3B,UAAA;AACK,aAAA,KAAK,YAAY,WAAW;AAC7B,iBAAO,cAAc,cAAc,aAAa,MAAM,IAAI,GAAG,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC;AAAA,QAAA;AAIzF,cAAM,SAAS,KAAK,KAAK,QAAQ,OAAO,UAAA,GAAa,IAAI;AACzD,cAAM,OAAO,cAAc,UAAU,cAAc,MAAM,KAAK,KAAK,UAAU,OAAO,IAAI,CAAE,KAAK,QAAQ,cAAc,GAAG,CAAE,CAAC,GAAG,IAAI,EAAE,MAAM,KAAK,KAAK,UAAU,OAAO,SAAS,CAAE,KAAK,QAAQ,cAAc,GAAG,CAAE,CAAC,GAAG,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK;AACzO,cAAM,OAAO,KAAK,IAAI,OAAO,WAAW,IAAI;AAC5C,cAAM,OAAO,KAAK,IAAI,OAAO,QAAA,GAAW,GAAG;AAC3C,iBAAS,MAAM,KAAK,KAAK,cAAc,MAAM,OAAK,MAAM,EAAE,CAAC,IAAE,MAAM,OAAO,MAAM,OAAK,MAAM;AACvF,eAAK,SAAS,KAAK,WAAW,GAAG,CAAC;AAC7B,eAAA,SAAS,KAAK,WAAW,mBAAmB,cAAc,MAAM,KAAK,EAAE,CAAC,CAAC;AAAA,QAClF;AAGG,YAAA,OAAO,SAAS,IAAI,GAAG;AACtB,cAAI,MAAM,KAAK,IAAI,GAAG,OAAO,UAAU;AACvC,cAAI,QAAQ;AACZ,iBAAM,MAAM,OAAO,SAAS,KAAK,MAAM,IAAI;AACjC,kBAAA,QAAQ,KAAK,KAAK,QAAQ,CAAE,KAAK,OAAO,UAAU,EAAE,GAAI,GAAG,IAAI;AACrE,kBAAM,eAAe,KAAK,KAAK,UAAU,MAAM,SAAS,CAAE,GAAG,KAAK,QAAQ,WAAY,CAAC,GAAG,IAAI;AAExF,kBAAA,QAAO,cAAc,UAAU,cAAc,MAAM,aAAa,MAAM,KAAK,EAAE,GAAG,IAAI;AACpF,kBAAA,cAAc,MAAM,QAAQ,KAAK,KAAK,cAAc,MAAM,MAAI,OAAM,EAAE,CAAC,IAAE,QAAO,KAAK,KAAK,cAAc,MAAM,aAAa,MAAI,OAAM,EAAE,CAAC,IAAE,OAAM,CAAC;AAE/I,oBAAA;AAER,iBAAK,SAAS,KAAK,WAAW,GAAG,CAAC;AAClC,iBAAK,SAAS,KAAK,WAAW,kBAAkB,GAAG,CAAC;AAAA,UACxD;AAAA,QACJ;AACG,YAAA,OAAO,SAAS,IAAI,GAAG;AACtB,cAAI,MAAM,KAAK,IAAI,GAAG,OAAO,UAAU;AACvC,cAAI,QAAQ;AACZ,iBAAM,MAAM,OAAO,SAAS,KAAK,MAAM,KAAK;AAClC,kBAAA,QAAQ,KAAK,KAAK,QAAQ,CAAE,KAAK,OAAO,UAAU,EAAE,GAAI,GAAG,IAAI;AACrE,kBAAM,eAAe,KAAK,KAAK,UAAU,MAAM,IAAI,CAAE,GAAG,KAAK,QAAQ,WAAY,CAAC,GAAG,IAAI;AAEnF,kBAAA,QAAO,cAAc,UAAU,cAAc,MAAM,MAAM,aAAa,KAAK,EAAE,GAAG,IAAI;AACpF,kBAAA,cAAc,MAAM,QAAQ,KAAK,MAAM,cAAc,MAAM,MAAI,OAAM,EAAE,CAAC,IAAE,QAAO,KAAK,MAAM,cAAc,MAAM,aAAa,MAAI,OAAM,EAAE,CAAC,IAAE,OAAM,CAAC;AAEjJ,oBAAA;AAER,iBAAK,SAAS,KAAK,WAAW,GAAG,CAAC;AAClC,iBAAK,SAAS,KAAK,WAAW,kBAAkB,GAAG,CAAC;AAAA,UACxD;AAAA,QACJ;AAAA,MAAA,UACF;AACE,aAAK,KAAK,YAAY;AAAA,MAC1B;AAAA,IACJ;AAAA,IAEA,WAAW,GAAuB;AACxB,YAAA,WAAW,IAAIA,WAAAA,WAAE,OAAO,KAAK,QAAQ,YAAY,CAAC;AAClD,YAAA,QAAQ,IAAIA,WAAAA,WAAE,OAAO,KAAK,QAAQ,YAAY,CAAC;AAE9C,aAAA,IAAIA,WAAAA,WAAE,SAAS,CAAC,UAAU,KAAK,GAAG,KAAK,SAAS;AAAA,IAC3D;AAAA,IAEA,WAAW,GAAuB;AACxB,YAAA,SAAS,IAAIA,WAAAA,WAAE,OAAO,GAAG,KAAK,QAAQ,SAAS;AAC/C,YAAA,UAAU,IAAIA,WAAAA,WAAE,OAAO,GAAG,KAAK,QAAQ,SAAS;AAE/C,aAAA,IAAIA,WAAAA,WAAE,SAAS,CAAC,QAAQ,OAAO,GAAG,KAAK,SAAS;AAAA,IAC3D;AAAA,IAEA,WAAW,MAA4C,KAAa;AAChE,YAAM,SAAS,KAAK,KAAK,UAAU,EAAE,IAAI,KAAM;AAC3C,UAAA;AACJ,UAAI,QAAQ,mBAAmB;AAC3B,iBAAS,IAAIA,WAAAA,WAAE,OAAO,OAAO,SAAA,GAAY,GAAG;AAAA,MAAA,OACzC;AACH,iBAAS,IAAIA,WAAAA,WAAE,OAAO,KAAK,OAAO,SAAS;AAAA,MAC/C;AAEO,aAAAA,WAAA,WAAE,OAAO,QAAQ;AAAA,QACpB,aAAa;AAAA,QACb,MAAMA,sBAAE,QAAQ;AAAA,UACZ,UAAU,CAAC,GAAG,CAAC;AAAA,UACf,WAAW;AAAA,UACX,MAAM,iBAAiB,OAAO,OAAO,MAAM;AAAA,QAAA,CAC9C;AAAA,MAAA,CACJ;AAAA,IACL;AAAA,WAEO,MAAM,QAAgB,QAAgB;AACzC,YAAM,MAAM,KAAK,IAAI,IAAI,MAAM;AAC/B,aAAO,KAAK,MAAM,SAAO,GAAG,IAAE;AAAA,IAClC;AAAA,WAEO,UAAU,QAAgB,kBAA2B;AACxD,UAAG,UAAU,KAAK,CAAC,SAAS,MAAM;AAC9B,cAAM,oBAAoB;AAAA,WACzB;AACD,YAAG,oBAAoB,UAAU;AACtB,iBAAA;AACX,YAAG,UAAU,IAAI;AACb,cAAI,MAAM;AACV,iBAAM,SAAO,GAAG;AAAO,mBAAA;AAAY,sBAAA;AAAA,UAAI;AACvC,iBAAM,UAAQ,KAAK;AAAO,mBAAA;AAAY,sBAAA;AAAA,UAAI;AAI1C,cAAG,UAAU;AACT,mBAAO,cAAc,MAAM,MAAI,KAAK,EAAE;AAAA,mBAClC,UAAU;AACd,mBAAO,cAAc,MAAM,MAAI,KAAK,EAAE;AAAA,mBAClC,UAAU;AACd,mBAAO,cAAc,MAAM,MAAI,KAAK,EAAE;AAAA;AAE/B,mBAAA;AAAA,QAAA,WACL,UAAU;AACT,iBAAA;AAAA,iBACH,UAAU;AACP,iBAAA;AAAA,iBACH,UAAU;AACP,iBAAA;AAAA;AAEA,iBAAA;AAAA,MACf;AAAA,IACJ;AAAA,WAEO,cAAc,OAA0C,OAA0C;AACrG,YAAM,UAAU,iBAAiBC,EAAA,eAAe,QAAQD,sBAAE,aAAa,KAAK;AAC5E,YAAM,UAAU,iBAAiBC,EAAA,eAAe,QAAQD,sBAAE,aAAa,KAAK;AAC5E,aAAOA,WAAAA,WAAE,aAAa;AAAA,QAClB,CAAE,KAAK,IAAI,QAAQ,SAAS,GAAG,QAAQ,SAAU,CAAA,GAAG,KAAK,IAAI,QAAQ,WAAW,QAAQ,QAAA,CAAS,CAAC;AAAA,QAClG,CAAE,KAAK,IAAI,QAAQ,SAAS,GAAG,QAAQ,SAAU,CAAA,GAAG,KAAK,IAAI,QAAQ,WAAW,QAAQ,QAAA,CAAS,CAAC;AAAA,MAAA,CACrG;AAAA,IACL;AAAA,EACJ;;;"}